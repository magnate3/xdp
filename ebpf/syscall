bpf_prog_load
   prog = bpf_prog_alloc(bpf_prog_size(attr->insn_cnt), GFP_USER);
   copy_from_user(prog->insns, u64_to_ptr(attr->insns),prog->len * sizeof(struct bpf_insn))
   err = bpf_prog_select_runtime(prog);
   err = bpf_prog_new_fd(prog);
bpf_prog_alloc
   fp = __vmalloc(size, gfp_flags, PAGE_KERNEL);
   aux = kzalloc(sizeof(*aux), GFP_KERNEL | gfp_extra_flags);
   fp->aux = aux;
   fp->aux->prog = fp;
   return fp;
int bpf_prog_new_fd(struct bpf_prog *prog)
{
    对于加载到内核空间的BPF程序，最后会给它分配一个文件句柄fd，将prog存储到对应的file->private_data上
    return anon_inode_getfd("bpf-prog", &bpf_prog_fops, prog, O_RDWR | O_CLOEXEC);
}
anon_inode_getfile:
    file->private_data = priv;
struct bpf_prog *____bpf_prog_get(struct fd f)
    return f.file->private_data;
