bpf_prog_load
   prog = bpf_prog_alloc(bpf_prog_size(attr->insn_cnt), GFP_USER);
   copy_from_user(prog->insns, u64_to_ptr(attr->insns),prog->len * sizeof(struct bpf_insn))
    /* run eBPF verifier */
   err = bpf_check(&prog, attr);
   err = bpf_prog_select_runtime(prog);
   err = bpf_prog_new_fd(prog);
bpf_prog_alloc
   fp = __vmalloc(size, gfp_flags, PAGE_KERNEL);
   aux = kzalloc(sizeof(*aux), GFP_KERNEL | gfp_extra_flags);
   fp->aux = aux;
   fp->aux->prog = fp;
   return fp;
int bpf_prog_new_fd(struct bpf_prog *prog)
{
    对于加载到内核空间的BPF程序，最后会给它分配一个文件句柄fd，将prog存储到对应的file->private_data上
    return anon_inode_getfd("bpf-prog", &bpf_prog_fops, prog, O_RDWR | O_CLOEXEC);
}
anon_inode_getfile:
    file->private_data = priv;
struct bpf_prog *____bpf_prog_get(struct fd f)
    return f.file->private_data;
bpf_prog_select_runtime
    #ifndef CONFIG_BPF_JIT_ALWAYS_ON
        fp->bpf_func = (void *) __bpf_prog_run;
    #else
        fp->bpf_func = (void *) __bpf_prog_ret0;
    #endif
	fp = bpf_int_jit_compile(fp);


====================================================
bpf_load_program_xattr
    sys_bpf_prog_load
	   	sys_bpf(BPF_PROG_LOAD, attr, size);
			bpf_prog_load
syscall(__NR_bpf, BPF_PROG_LOAD, &attr, sizeof(attr));
with of course, the corresponding bpf_attr structure being filled before :
union bpf_attr attr = {
			.prog_type = prog_type, /* kprobe filter? socket filter? */  
			.insns = ptr_to_u64((void *) insns), /* complete bpf instructions */
			.insn_cnt = prog_len / sizeof(struct bpf_insn), /* how many? */
			.license = ptr_to_u64((void *) license), /* GPL maybe */
			.log_buf = ptr_to_u64(bpf_log_buf), /* log buffer */
			.log_size = LOG_BUF_SIZE,
			.log_level = 1,
};
